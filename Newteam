import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import { Phone } from "./phone";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

describe("Phone Component", () => {
  const mockDispatch = jest.fn();
  const mockHandleCallback = jest.fn();

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selectorFn) => {
      if (selectorFn.name === "lovSelector") {
        return {
          lov: [
            {
              label: "Country Code",
              value: [{ CODE_DESC: "(+65)" }],
            },
          ],
        };
      }
      if (selectorFn.name === "stageSelector") {
        return [
          {
            stageInfo: {
              applicants: {
                mobile_number_a_1: "123456789",
              },
            },
          },
        ];
      }
      if (selectorFn.name === "fieldErrorSelector") {
        return {};
      }
      if (selectorFn.name === "userInputSelector") {
        return {
          applicants: {
            mobile_number_a_1: "987654321",
          },
        };
      }
      return {};
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders Phone component with label and input field", () => {
    render(
      <Phone
        data={{
          logical_field_name: "mobile_number",
          rwb_label_name: "Mobile Number",
          type: "text",
          min_length: 8,
          length: 12,
          regex: "^\\d+$",
          mandatory: "Yes",
          editable: false,
        }}
        handleCallback={mockHandleCallback}
      />
    );

    // Check if label is rendered
    expect(screen.getByLabelText("Mobile Number")).toBeInTheDocument();

    // Check if input is rendered
    const input = screen.getByPlaceholderText("Mobile Number");
    expect(input).toBeInTheDocument();
    expect(input).toHaveAttribute("minLength", "8");
    expect(input).toHaveAttribute("maxLength", "12");
    expect(input).toHaveAttribute("pattern", "^\\d+$");
  });

  it("displays country code from LOV data", () => {
    render(
      <Phone
        data={{
          logical_field_name: "mobile_number",
          rwb_label_name: "Mobile Number",
          type: "text",
          min_length: 8,
          length: 12,
          regex: "^\\d+$",
          mandatory: "Yes",
          editable: false,
        }}
        handleCallback={mockHandleCallback}
      />
    );

    // Check if country code is displayed
    expect(screen.getByText("(+65)")).toBeInTheDocument();
  });

  it("handles input change correctly", () => {
    render(
      <Phone
        data={{
          logical_field_name: "mobile_number",
          rwb_label_name: "Mobile Number",
          type: "text",
          min_length: 8,
          length: 12,
          regex: "^\\d+$",
          mandatory: "Yes",
          editable: false,
        }}
        handleCallback={mockHandleCallback}
      />
    );

    // Simulate input change
    const input = screen.getByPlaceholderText("Mobile Number");
    fireEvent.change(input, { target: { value: "91234567" } });

    expect(input).toHaveValue("91234567");
    expect(mockHandleCallback).toHaveBeenCalledWith(
      {
        logical_field_name: "mobile_number",
        rwb_label_name: "Mobile Number",
        type: "text",
        min_length: 8,
        length: 12,
        regex: "^\\d+$",
        mandatory: "Yes",
        editable: false,
      },
      "91234567"
    );
  });

  it("shows error message for invalid input", () => {
    render(
      <Phone
        data={{
          logical_field_name: "mobile_number",
          rwb_label_name: "Mobile Number",
          type: "text",
          min_length: 8,
          length: 12,
          regex: "^\\d+$",
          mandatory: "Yes",
          editable: false,
        }}
        handleCallback={mockHandleCallback}
      />
    );

    // Simulate invalid input
    const input = screen.getByPlaceholderText("Mobile Number");
    fireEvent.change(input, { target: { value: "123" } });

    // Check for error message
    expect(screen.getByText(/Minimum 8 digits required/)).toBeInTheDocument();
  });

  it("dispatches action on blur", () => {
    render(
      <Phone
        data={{
          logical_field_name: "mobile_number",
          rwb_label_name: "Mobile Number",
          type: "text",
          min_length: 8,
          length: 12,
          regex: "^\\d+$",
          mandatory: "Yes",
          editable: false,
        }}
        handleCallback={mockHandleCallback}
      />
    );

    const input = screen.getByPlaceholderText("Mobile Number");

    // Simulate blur event
    fireEvent.blur(input);

    expect(mockDispatch).toHaveBeenCalled();
  });
});
