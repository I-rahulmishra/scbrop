import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import { Phone } from "./Phone";
import validateService from "../../../services/validation-service";
import errorMsg from "../../../assets/_json/error.json";

// Mock validation service
jest.mock("../../../services/validation-service", () => ({
  allowOnlyCharacter: jest.fn(),
}));

const mockStore = configureStore([]);

describe("Phone Component", () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      lov: {
        lov: [
          { label: "mobile", value: [{ CODE_DESC: "(+65)" }] },
        ],
      },
      stages: {
        stages: [
          {
            stageId: "stage-1",
            stageInfo: {
              applicants: {
                mobile_number_a_1: "91234567",
              },
            },
          },
        ],
        userInput: {
          applicants: { mobile_number_a_1: "91234567" },
        },
      },
      fielderror: { error: null },
    });

    store.dispatch = jest.fn();
  });

  const defaultProps = {
    data: {
      type: "text",
      logical_field_name: "mobile_number",
      rwb_label_name: "Mobile Number",
      regex: "^[89][0-9]{7}$",
      mandatory: "Yes",
      editable: false,
      min_length: 8,
      length: 8,
    },
    handleCallback: jest.fn(),
  };

  const renderComponent = (props = {}) =>
    render(
      <Provider store={store}>
        <Phone {...defaultProps} {...props} />
      </Provider>
    );

  it("renders the component with initial state", () => {
    renderComponent();
    expect(screen.getByLabelText("Mobile Number")).toBeInTheDocument();
    expect(screen.getByLabelText("Mobile Number")).toHaveAttribute("type", "text");
    expect(screen.getByLabelText("Mobile Number")).toHaveValue("91234567");
  });

  it("displays an error when mandatory field is left empty", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.change(input, { target: { value: "" } });
    expect(screen.getByText(`${errorMsg.emity} Mobile Number`)).toBeInTheDocument();
  });

  it("displays an error when the phone number does not start with 8 or 9", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.change(input, { target: { value: "71234567" } });
    expect(screen.getByText(errorMsg.sgMobile)).toBeInTheDocument();
  });

  it("displays an error when the phone number is shorter than the minimum length", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.change(input, { target: { value: "9123" } });
    expect(
      screen.getByText(`${errorMsg.minLength} 8 digits`)
    ).toBeInTheDocument();
  });

  it("calls the handleCallback function on valid input", () => {
    const handleCallbackMock = jest.fn();
    renderComponent({ handleCallback: handleCallbackMock });
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.change(input, { target: { value: "91234567" } });
    expect(handleCallbackMock).toHaveBeenCalledWith(
      defaultProps.data,
      "91234567"
    );
  });

  it("renders the country code from LOV data", () => {
    renderComponent();
    expect(screen.getByText("(+65)")).toBeInTheDocument();
  });

  it("handles allowOnlyCharacter validation on keypress", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.keyPress(input, { key: "a", code: "KeyA" });
    expect(validateService.allowOnlyCharacter).toHaveBeenCalledWith(
      expect.any(Object),
      "mobile_number"
    );
  });

  it("dispatches field updates on blur", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.blur(input, { target: { value: "91234567" } });
    expect(store.dispatch).toHaveBeenCalled();
  });

  it("sets error state on invalid pattern match", () => {
    renderComponent();
    const input = screen.getByLabelText("Mobile Number");
    fireEvent.change(input, { target: { value: "invalid" } });
    expect(
      screen.getByText(`${errorMsg.patterns} Mobile Number`)
    ).toBeInTheDocument();
  });
});
