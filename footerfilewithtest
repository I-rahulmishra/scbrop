import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { CONSTANTS } from "../../../utils/common/constants";
import { KeyWithAnyModel, StoreModel } from "../../../utils/model/common-model";
import "./footer.scss";
import { getUrl } from "../../../utils/common/change.utils";

const Footer = (props: KeyWithAnyModel) => {
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const [backBtn, setBackBtn] = useState(false);
  const [ctaSpinner, setCtaSpinner] = useState(false);
  const urlEnpoint = getUrl.getUrlEndPoint();

  const backHandler = () => {
    props.backHandler();
  };

  useEffect(() => {
    setCtaSpinner(
      urlEnpoint === "acknowledge" || urlEnpoint === "preserve" ? true : false
    );
  }, [urlEnpoint]);

  useEffect(() => {
    if (stageSelector && stageSelector.length > 0) {
      const isEnableBackBtn =
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.SSF_1 &&
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.BD_1 &&
        !(props.journeyType === 'NTC' && ((stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.BD_3 && stageSelector[0].stageInfo.products[0].product_category == 'CC') ||
        (stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.LD_1 && stageSelector[0].stageInfo.products[0].product_type === '280')))
          ? true
          : false;
      setBackBtn(isEnableBackBtn);
    }
  }, [stageSelector]);

  useEffect(() => {
    if (stageSelector && stageSelector.length > 0) {
      if(props.journeyType === 'NTC' && ((stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.BD_3 && stageSelector[0].stageInfo.products[0].product_category == 'CC') ||
      (stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.LD_1 && stageSelector[0].stageInfo.products[0].product_type === '280')))
        {
        setBackBtn(false);
      }
     else if (
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.SSF_1 &&
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.BD_1 &&
        !props.otherMyinfo
      ) {
        setBackBtn(true);
      } else {
        setBackBtn(props.otherMyinfo);
      }
    }

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props.otherMyinfo]);

  return (
    <>
      <div className="footer">
        {backBtn && !props.uploadJourney && (
          <div className="back" onClick={backHandler}>
            <span className="arrow"></span> Back
          </div>
        )}
        <button type="submit" className={`continue ${props.validateNxt}`}>
          {ctaSpinner && <div className="circle-spinner"></div>}
          {!ctaSpinner && stageSelector[0].stageId === "rp" || props.uploadJourney == true
            ? "Agree and Submit"
            : "Continue"}
        </button>
      </div>
    </>
  );
};

export default Footer;


now the test case file 

import React from "react";
import { shallow } from "enzyme";
import { useSelector } from "react-redux";
import Footer from "./footer";
import { Provider } from "react-redux";
import { render } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect'
import configureStore,{MockStoreEnhanced} from 'redux-mock-store'
import { Store } from "@reduxjs/toolkit";
import { getUrl } from "../../../utils/common/change.utils";

jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
}));


jest.mock('../../../utils/common/change.utils', () => ({
    getUrl: {
      getProductInfo: jest.fn(),
      getParameterByName: jest.fn(),
      getChannelRefNo: jest.fn(()=>({
       
            channelRefNo: 'mock-channel',
            applicationRefNo: 'mock-app-ref',
         
      })),
      getRate: jest.fn(),
      getUrlEndPoint: jest.fn(),
    },
    authenticateType: jest.fn(()=>"manual")
  }));

describe("Footer Component", () => {
  const backHandlerMock = jest.fn();

  beforeEach(() => {

    
    const mockStageSelector =[{
            stageId:'rp',
        }];
    
  });

  afterEach(()=>{
    jest.clearAllMocks();
  });


  test('should render Footer component',()=>{
    (getUrl.getUrlEndPoint as jest.Mock).mockReturnValue(()=>"acknowledge");
    (useSelector as jest.Mock).mockReturnValue([{
        stageId:'rp',
    }]);
    const {getByText} = render(

            <Footer props={{validateNext:true, uploadjourney:true}}/>
    );
     expect(getByText('Agree and Submit')).toBeInTheDocument()
})

})
